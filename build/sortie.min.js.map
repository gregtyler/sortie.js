{"version":3,"sources":["sortie.js"],"names":["window","Sortie","strReverse","str","split","reverse","join","parseDate","format","parts","replace","match","type","start","substr","length","Date","yyyy","mm","dd","hh","ii","ss","textContent","node","$","text","SortieInstance","el","options","getOptions","dataAttr","$table","data","dataOptions","key","normkey","toLowerCase","extend","defaults","init","sorts","sort","attr","$headers","console","error","aria-atomic","aria-live","aria-relevant","col","$button","css","backgroundColor","border","html","markers","unsorted","eq","whiteSpace","cursor","click","sortFactory","sortie","sortieCompareFunction","compareFactory","sortieButton","append","initialsort","opts","toString","dir","i","l","parseInt","$th","$btn","rows","Array","prototype","slice","call","$body","find","get","current","desc","asc","not","each","index","$el","removeAttr","frag","document","createDocumentFragment","tbody","appendChild","innerHTML","trigger","sortSpec","bits","operation","arguments","callback","compareFunctions","a","b","cellA","children","cellB","order","obj","create","registerComparison","codes","ah","trim","bh","localeCompare","args","dateFormat","dateA","dateB","aInt","bInt","isNaN","fn","apply","this","command"],"mappings":"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","file":"sortie.min.js","sourcesContent":["/*!\n * Sortie.js v<<VERSION>>\n * An inoffensive table sorter for developers\n */\nwindow.Sortie = (function SortieConstructor() {\n    'use strict';\n\n   /**\n    * Variable definitions\n    */\n    var defaults = {\n        initialsort: -1,\n        markers: {\n            asc: '&#8595;',\n            desc: '&#8593;',\n            unsorted: '&#8597;'\n        }\n    };\n\n    var compareFunctions = {};\n\n   /**\n    * Reverse a string\n    */\n    function strReverse(str) {\n        return str.split('').reverse().join('');\n    }\n\n   /**\n    * Parse a date from a format\n    * e.g. parseDate('1990-07-26 07:24', 'yyyy-mm-ss hh:ii')\n    */\n    function parseDate(str, format) {\n        var parts = {};\n        if (typeof format === 'undefined') format = 'yyyy-mm-dd';\n        format.replace(/(dd|mm|yyyy|hh|ii)/g, function(match, type, start) {\n            parts[type] = str.substr(start, type.length);\n        });\n\n        return new Date(\n            parts.yyyy || 0,\n            (parts.mm - 1) || 0,\n            parts.dd || 1,\n            parts.hh || 0,\n            parts.ii || 0,\n            parts.ss || 0\n        );\n    }\n\n   /**\n    * Get the text content of a node\n    */\n    function textContent(node) {\n        return node.textContent || $(node).text();\n    }\n\n    function SortieInstance(el, options) {\n        // Get the variables we'll be using in this sortie object\n        var $table = $(el);\n        var $body = $table.find('tbody').eq(0);\n        var $headers = $table.find('thead th');\n        var current;\n\n       /**\n        * Get the options object\n        */\n        function getOptions() {\n            var dataAttr = $table.data();\n            var dataOptions = {};\n            for (var key in dataAttr) {\n                if (key.substr(0, 6) === 'sortie' && key.length > 6) {\n                    var normkey = key.toLowerCase().replace(/-/g, '');\n                    dataOptions[normkey.substr(6)] = dataAttr[key];\n                }\n            }\n\n            return $.extend(true, {}, defaults, options, dataOptions);\n        }\n\n       /**\n        * Initialise sortie\n        */\n        function init() {\n            // Set the options object\n            options = getOptions();\n\n            // Determine the sort order\n            var sorts = options.sort || $table.attr('data-sortie');\n            if (!typeof sorts !== 'object') {\n                sorts = sorts.split('|');\n            }\n\n            if (sorts.length > $headers.length) {\n                console.error('Sortie config error: Too many sort columns specified');\n            }\n\n            // Add aria role-live settings and\n            $table.attr({\n                'aria-atomic': true,\n                'aria-live': 'polite',\n                'aria-relevant': 'all'\n            });\n\n            // Generate an ID for the table\n            if (!$table.attr('id')) {\n                $table.attr('id', 'sortieTable' + (new Date() * 1));\n            }\n\n            // Add sortie specification to each column\n            for (var col in sorts) {\n                // Skip columns with no sort criteria\n                if (!sorts[col]) continue;\n\n                // Add a sorting icon to click\n                var $button = $('<button />').css({backgroundColor: 'transparent', border: 'none'}).html(options.markers.unsorted);\n                $button.attr('aria-controls', $table.attr('id'));\n                $headers.eq(col)\n                    .css({whiteSpace:'nowrap', cursor:'pointer'})\n                    .click(sortFactory(col))\n                    .data({\n                        sortie: true,\n                        sortieCompareFunction: compareFactory(col, sorts[col]),\n                        sortieButton: $button\n                    })\n                    .append(' ', $button);\n            }\n\n            // Perform an initial sort\n            if (options.initialsort !== false) {\n                var opts = {};\n                if (options.initialsort.toString().substr(-1, 1) === 'D') {\n                    opts.dir = 'DESC';\n                } else if (options.initialsort.toString().substr(-1, 1) === 'A') {\n                    opts.dir = 'ASC';\n                } else if (options.initialsort.toString() === '-1') {\n                    for (var i = 0, l = sorts.length; i < l; i++) {\n                        if (sorts[i]) {\n                            options.initialsort = i;\n                            break;\n                        }\n                    }\n                }\n\n                sort(options.initialsort, opts);\n            }\n        }\n\n        // Factory for the sort function\n        function sortFactory(col) {\n            return function() {\n                sort(col);\n            }\n        }\n\n       /**\n        * Sort the table by the given column\n        */\n        function sort(col, opts) {\n            // Convert col to an integer\n            col = parseInt(col, 10);\n\n            var opts = $.extend({}, opts);\n            var $th = $headers.eq(col);\n            var $btn = $th.data('sortieButton');\n            var rows = Array.prototype.slice.call($body.find('tr').get(), 0);\n            var dir = typeof opts.dir !== 'undefined' ? opts.dir : 'ASC';\n\n            // Get the sort order\n            if (current === col && $th.data('sortieDirection') === 'ASC' && typeof opts.dir == 'undefined') {\n                dir = 'DESC';\n            }\n\n            // Save the new state\n            current = col;\n            $th.data('sortieDirection', dir);\n            $th.attr('aria-sort', dir.toLowerCase() + 'ending')\n\n            // Perform the sort\n            rows.sort($th.data('sortieCompareFunction'));\n\n            // Update the button's HTML\n            if (dir === 'DESC') {\n                $btn.html(options.markers.desc);\n                rows = rows.reverse();\n            } else {\n                $btn.html(options.markers.asc);\n            }\n\n            // Update the other buttons\n            $headers.not($th).each(function(index, el) {\n                var $el = $(el);\n                $el.removeAttr('aria-sort');\n                if ($el.data('sortie')) {\n                    $el.data('sortieButton').html(options.markers.unsorted);\n                }\n            });\n\n            // Update the content of the now-sorted table\n            var frag = document.createDocumentFragment();\n            var tbody = $body.get(0);\n\n            for (var i in rows) {\n                frag.appendChild(rows[i]);\n            }\n\n            // Put the now sorted rows back onto the page\n            tbody.innerHTML = '';\n            tbody.appendChild(frag);\n\n            $table.trigger('sortie:sorted');\n        }\n\n       /**\n        * Return the suitable comparison function for the column\n        */\n        function compareFactory(col, sortSpec) {\n            var bits = sortSpec.split(':');\n            var operation = bits[0];\n            var arguments = bits[1] ? bits[1].split(',') : [];\n            var callback = compareFunctions[operation];\n\n            if (typeof callback !== 'function') {\n                console.error('Sortie error: comparison function not found for rule \"' + operation + '\"');\n                var callback = function() {return 0};\n            }\n\n            return function compare(a, b) {\n                var cellA = a.children[col];\n                var cellB = b.children[col];\n\n                var order = callback.call(window, cellA, cellB, arguments);\n\n                // If asked to, reverse the search order\n                return sortSpec.substr(1, 1) === 'r' ? -order : order;\n            }\n        }\n\n        // Run the initialisation\n        init();\n\n        // Return values\n        var obj = { sort: sort };\n        $table.data('mySortieInstance', obj);\n        return obj;\n    }\n\n    // Create a new sortie instance\n    function create(el, options) {\n        return new SortieInstance(el, options);\n    }\n\n    // Register a new comparison function\n    function registerComparison(codes, callback) {\n        if (typeof codes === 'string') codes = [codes];\n\n        // Register against each code provided\n        for (var i = 0, l = codes.length; i < l; i++) {\n            compareFunctions[codes[i]] = callback;\n        }\n    }\n\n    /*** Comparison functions ***/\n\n    // Compare alphanumerically\n    registerComparison(['a', 'alpha'], function compareAlpha(cellA, cellB) {\n        var ah = textContent(cellA).trim();\n        var bh = textContent(cellB).trim();\n        if (cellA.dir === 'rtl') ah = strReverse(ah);\n        if (cellB.dir === 'rtl') bh = strReverse(bh);\n        return ah.localeCompare(bh);\n    });\n\n    // Compare by date attributes\n    registerComparison(['d', 'date'], function compareData(cellA, cellB, args) {\n        var dateFormat = args[0];\n        var dateA = parseDate(textContent(cellA), dateFormat);\n        var dateB = parseDate(textContent(cellB), dateFormat);\n\n        if (dateA > dateB) {\n            return 1;\n        } else if (dateB < dateA) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n\n    // Compare integers\n    registerComparison(['i', 'int'], function compareInt(cellA, cellB) {\n        var aInt = parseInt(textContent(cellA), 10);\n        var bInt = parseInt(textContent(cellB), 10);\n        if (isNaN(bInt)) {\n            return isNaN(aInt) ? 0 : 1;\n        } else if (isNaN(aInt)) {\n            return -1;\n        } else {\n            return aInt - bInt;\n        }\n    });\n\n    return {\n        registerComparison: registerComparison,\n        create: create\n    };\n})();\n\n// Attach sortie to jQuery\n$.fn.sortie = function(options) {\n    var args = Array.prototype.slice.apply(arguments);\n\n    return $(this).each(function() {\n        if (typeof options === 'string') {\n            var command = options;\n            $(this).data('mySortieInstance')[command](args.slice(1));\n        } else {\n            if (!$(this).data('mySortieInstance')) {\n                Sortie.create(this, options);\n            }\n        }\n    });\n}\n"],"sourceRoot":"/source/"}